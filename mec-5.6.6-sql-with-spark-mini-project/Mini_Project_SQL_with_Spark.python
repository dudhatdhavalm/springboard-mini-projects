{"version":"NotebookV1","origId":4364181566351976,"name":"Mini_Project_SQL_with_Spark","language":"python","commands":[{"version":"CommandV1","origId":4364181566351977,"guid":"ec311aab-5b66-4199-8c2b-fd39c985613a","subtype":"command","commandType":"auto","position":1.0,"command":"%md ## SQL at Scale with Spark SQL\n\nWelcome to the SQL mini project. For this project, you will use the Databricks Platform and work through a series of exercises using Spark SQL. The dataset size may not be too big but the intent here is to familiarize yourself with the Spark SQL interface which scales easily to huge datasets, without you having to worry about changing your SQL queries. \n\nThe data you need is present in the mini-project folder in the form of three CSV files. This data will be imported in Databricks to create the following tables under the __`country_club`__ database.\n\n<br>\n1. The __`bookings`__ table,\n2. The __`facilities`__ table, and\n3. The __`members`__ table.\n\nYou will be uploading these datasets shortly into the Databricks platform to understand how to create a database within minutes! Once the database and the tables are populated, you will be focusing on the mini-project questions.\n\nIn the mini project, you'll be asked a series of questions. You can solve them using the databricks platform, but for the final deliverable,\nplease download this notebook as an IPython notebook (__`File -> Export -> IPython Notebook`__) and upload it to your GitHub.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d9a572a6-1759-4acb-a7d8-3fa95a304262"},{"version":"CommandV1","origId":4364181566351978,"guid":"e4223dea-9539-42a7-8d6f-b504efd9b440","subtype":"command","commandType":"auto","position":2.0,"command":"%md ### Creating the Database\n\nWe will first create our database in which we will be creating our three tables of interest","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"64fcdaaf-51b2-4445-af61-e187affb76b3"},{"version":"CommandV1","origId":4364181566351979,"guid":"1b61e004-9ee9-4977-b7e6-574ee1c74221","subtype":"command","commandType":"auto","position":3.0,"command":"%sql \ndrop database if exists country_club cascade;\ncreate database country_club;\nshow databases;","commandVersion":1,"state":"finished","results":{"type":"table","data":[["country_club"],["default"]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"namespace","type":"\"string\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1601658166984,"submitTime":1601658128225,"finishTime":1601658186974,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"174.208984375","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"3fbe0246-74ed-4243-8cc1-c6e469b1d984"},{"version":"CommandV1","origId":4364181566351980,"guid":"c0b6c315-a259-4dcf-80ad-6291fd9cfdfc","subtype":"command","commandType":"auto","position":4.0,"command":"%md ### Creating the Tables\n\nIn this section, we will be creating the three tables of interest and populate them with the data from the CSV files already available to you. \nTo get started, first upload the three CSV files to the DBFS as depicted in the following figure\n\n![](https://i.imgur.com/QcCruBr.png)\n\n\nOnce you have done this, please remember to execute the following code to build the dataframes which will be saved as tables in our database","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8173b5b8-c51a-4101-85f1-b7ebef797647"},{"version":"CommandV1","origId":4364181566351981,"guid":"456d15b6-0385-48e7-91d4-29ab9b249fdf","subtype":"command","commandType":"auto","position":5.0,"command":"# File location and type\nfile_location_bookings = \"/FileStore/tables/Bookings.csv\"\nfile_location_facilities = \"/FileStore/tables/Facilities.csv\"\nfile_location_members = \"/FileStore/tables/Members.csv\"\n\nfile_type = \"csv\"\n\n# CSV options\ninfer_schema = \"true\"\nfirst_row_is_header = \"true\"\ndelimiter = \",\"\n\n# The applied options are for CSV files. For other file types, these will be ignored.\nbookings_df = (spark.read.format(file_type) \n                    .option(\"inferSchema\", infer_schema) \n                    .option(\"header\", first_row_is_header) \n                    .option(\"sep\", delimiter) \n                    .load(file_location_bookings))\n\nfacilities_df = (spark.read.format(file_type) \n                      .option(\"inferSchema\", infer_schema) \n                      .option(\"header\", first_row_is_header) \n                      .option(\"sep\", delimiter) \n                      .load(file_location_facilities))\n\nmembers_df = (spark.read.format(file_type) \n                      .option(\"inferSchema\", infer_schema) \n                      .option(\"header\", first_row_is_header) \n                      .option(\"sep\", delimiter) \n                      .load(file_location_members))","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[{"name":"bookings_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"bookid","nullable":true,"type":"integer"},{"metadata":{},"name":"facid","nullable":true,"type":"integer"},{"metadata":{},"name":"memid","nullable":true,"type":"integer"},{"metadata":{},"name":"starttime","nullable":true,"type":"string"},{"metadata":{},"name":"slots","nullable":true,"type":"integer"}],"type":"struct"},"tableIdentifier":null},{"name":"facilities_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"facid","nullable":true,"type":"integer"},{"metadata":{},"name":"name","nullable":true,"type":"string"},{"metadata":{},"name":"membercost","nullable":true,"type":"double"},{"metadata":{},"name":"guestcost","nullable":true,"type":"double"},{"metadata":{},"name":"initialoutlay","nullable":true,"type":"integer"},{"metadata":{},"name":"monthlymaintenance","nullable":true,"type":"integer"}],"type":"struct"},"tableIdentifier":null},{"name":"members_df","typeStr":"pyspark.sql.dataframe.DataFrame","schema":{"fields":[{"metadata":{},"name":"memid","nullable":true,"type":"integer"},{"metadata":{},"name":"surname","nullable":true,"type":"string"},{"metadata":{},"name":"firstname","nullable":true,"type":"string"},{"metadata":{},"name":"address","nullable":true,"type":"string"},{"metadata":{},"name":"zipcode","nullable":true,"type":"integer"},{"metadata":{},"name":"telephone","nullable":true,"type":"string"},{"metadata":{},"name":"recommendedby","nullable":true,"type":"integer"},{"metadata":{},"name":"joindate","nullable":true,"type":"string"}],"type":"struct"},"tableIdentifier":null}]},"errorSummary":null,"error":null,"workflows":[],"startTime":1601658215363,"submitTime":1601658215345,"finishTime":1601658227987,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"72d7edaa-65a3-4c83-8a11-10167b53f757"},{"version":"CommandV1","origId":4364181566351982,"guid":"24995ead-4214-4efe-8887-f8025de47902","subtype":"command","commandType":"auto","position":6.0,"command":"%md ### Viewing the dataframe schemas\n\nWe can take a look at the schemas of our potential tables to be written to our database soon","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"01d05747-01f5-4259-af49-bff377d2228e"},{"version":"CommandV1","origId":4364181566351983,"guid":"6df31277-fb82-435f-9f10-dc8cdf8042fc","subtype":"command","commandType":"auto","position":7.0,"command":"print('Bookings Schema')\nbookings_df.printSchema()\nprint('Facilities Schema')\nfacilities_df.printSchema()\nprint('Members Schema')\nmembers_df.printSchema()","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">Bookings Schema\nroot\n |-- bookid: integer (nullable = true)\n |-- facid: integer (nullable = true)\n |-- memid: integer (nullable = true)\n |-- starttime: string (nullable = true)\n |-- slots: integer (nullable = true)\n\nFacilities Schema\nroot\n |-- facid: integer (nullable = true)\n |-- name: string (nullable = true)\n |-- membercost: double (nullable = true)\n |-- guestcost: double (nullable = true)\n |-- initialoutlay: integer (nullable = true)\n |-- monthlymaintenance: integer (nullable = true)\n\nMembers Schema\nroot\n |-- memid: integer (nullable = true)\n |-- surname: string (nullable = true)\n |-- firstname: string (nullable = true)\n |-- address: string (nullable = true)\n |-- zipcode: integer (nullable = true)\n |-- telephone: string (nullable = true)\n |-- recommendedby: integer (nullable = true)\n |-- joindate: string (nullable = true)\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1601658230956,"submitTime":1601658230942,"finishTime":1601658231041,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c6a95a94-d7e8-4019-a8e5-c66e4078d926"},{"version":"CommandV1","origId":4364181566351984,"guid":"c11d8e27-96c7-42ed-b59e-de5ef1e20ec7","subtype":"command","commandType":"auto","position":8.0,"command":"%md ### Create permanent tables\nWe will be creating three permanent tables here in our __`country_club`__ database as we discussed previously with the following code","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d35d59d7-7290-4ad5-8cbb-5c0e81e0ac00"},{"version":"CommandV1","origId":4364181566351985,"guid":"a83cb32c-8e7a-462a-a122-d169b757e6bf","subtype":"command","commandType":"auto","position":9.0,"command":"permanent_table_name_bookings = \"country_club.Bookings\"\nbookings_df.write.format(\"parquet\").saveAsTable(permanent_table_name_bookings)\n\npermanent_table_name_facilities = \"country_club.Facilities\"\nfacilities_df.write.format(\"parquet\").saveAsTable(permanent_table_name_facilities)\n\npermanent_table_name_members = \"country_club.Members\"\nmembers_df.write.format(\"parquet\").saveAsTable(permanent_table_name_members)","commandVersion":1,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1601658236194,"submitTime":1601658236180,"finishTime":1601658251468,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2703e674-147d-4757-9f71-ef3a7a5ad73e"},{"version":"CommandV1","origId":4364181566351986,"guid":"4581aa0c-6cf6-4aab-bbf7-af83edbb7834","subtype":"command","commandType":"auto","position":10.0,"command":"%md ### Refresh tables and check them","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"06687742-6151-4976-a13c-995b825c3794"},{"version":"CommandV1","origId":4364181566351987,"guid":"b71df3b0-5b24-458b-925f-f7a5b14a6678","subtype":"command","commandType":"auto","position":11.0,"command":"%sql\nuse country_club;\nREFRESH table bookings;\nREFRESH table facilities;\nREFRESH table members;\nshow tables;","commandVersion":1,"state":"finished","results":{"type":"table","data":[["country_club","bookings",false],["country_club","facilities",false],["country_club","members",false]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"database","type":"\"string\"","metadata":"{}"},{"name":"tableName","type":"\"string\"","metadata":"{}"},{"name":"isTemporary","type":"\"boolean\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1601658687191,"submitTime":1601658687178,"finishTime":1601658689369,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"380.103515625","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"7c348aed-8f32-4c3f-9d06-73cc48fafbe2"},{"version":"CommandV1","origId":4364181566351988,"guid":"78fed428-5e29-4b99-b66d-9cdb3922e6a4","subtype":"command","commandType":"auto","position":12.0,"command":"%md ### Test a sample SQL query\n\n__Note:__ You can use __`%sql`__ at the beginning of a cell and write SQL queries directly as seen in the following cell. Neat isn't it!","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"a2b660d3-cc31-4408-ba90-0bbe8da3c93a"},{"version":"CommandV1","origId":4364181566351989,"guid":"b526a7d9-e552-4cb7-a3b1-65cbb02db467","subtype":"command","commandType":"auto","position":13.0,"command":"%sql\nselect * from bookings limit 3","commandVersion":1,"state":"finished","results":{"type":"table","data":[[0,3,1,"2012-07-03 11:00:00",2],[1,4,1,"2012-07-03 08:00:00",2],[2,6,0,"2012-07-03 18:00:00",2]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"bookid","type":"\"integer\"","metadata":"{}"},{"name":"facid","type":"\"integer\"","metadata":"{}"},{"name":"memid","type":"\"integer\"","metadata":"{}"},{"name":"starttime","type":"\"string\"","metadata":"{}"},{"name":"slots","type":"\"integer\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1601186080573,"submitTime":1601186080565,"finishTime":1601186084765,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"609.94287109375","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"dd9750a8-6102-4552-996d-54f378ab8915"},{"version":"CommandV1","origId":4364181566351990,"guid":"2a31eea0-7b7f-45c4-ad67-37d6a279164b","subtype":"command","commandType":"auto","position":14.0,"command":"%md #### Q1: Some of the facilities charge a fee to members, but some do not. Please list the names of the facilities that do.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"9b49c9ce-234f-43df-81eb-7fa98493f6bf"},{"version":"CommandV1","origId":4364181566351991,"guid":"520dec70-14b4-47aa-a6cd-ec40950685b0","subtype":"command","commandType":"auto","position":15.0,"command":"%sql\nSELECT * FROM facilities WHERE membercost > 0","commandVersion":17,"state":"finished","results":{"type":"table","data":[[0,"Tennis Court 1",5.0,25.0,10000,200],[1,"Tennis Court 2",5.0,25.0,8000,200],[4,"Massage Room 1",9.9,80.0,4000,3000],[5,"Massage Room 2",9.9,80.0,4000,3000],[6,"Squash Court",3.5,17.5,5000,80]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"facid","type":"\"integer\"","metadata":"{}"},{"name":"name","type":"\"string\"","metadata":"{}"},{"name":"membercost","type":"\"double\"","metadata":"{}"},{"name":"guestcost","type":"\"double\"","metadata":"{}"},{"name":"initialoutlay","type":"\"integer\"","metadata":"{}"},{"name":"monthlymaintenance","type":"\"integer\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1600953022753,"submitTime":1600953022744,"finishTime":1600953023714,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"760.90087890625","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8e66b474-8e29-4878-8c97-1ec893bc2517"},{"version":"CommandV1","origId":4364181566351992,"guid":"cb0952cf-a58f-4bd0-9482-4e35093c116f","subtype":"command","commandType":"auto","position":16.0,"command":"%md ####  Q2: How many facilities do not charge a fee to members?","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"73d62432-edaf-4697-b024-ba2da81b0eff"},{"version":"CommandV1","origId":4364181566351993,"guid":"4fc610c5-0de9-425e-8f9b-68e3145d44c0","subtype":"command","commandType":"auto","position":17.0,"command":"%sql\n\nSELECT * FROM facilities WHERE membercost = 0","commandVersion":4,"state":"finished","results":{"type":"table","data":[[2,"Badminton Court",0.0,15.5,4000,50],[3,"Table Tennis",0.0,5.0,320,10],[7,"Snooker Table",0.0,5.0,450,15],[8,"Pool Table",0.0,5.0,400,15]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"facid","type":"\"integer\"","metadata":"{}"},{"name":"name","type":"\"string\"","metadata":"{}"},{"name":"membercost","type":"\"double\"","metadata":"{}"},{"name":"guestcost","type":"\"double\"","metadata":"{}"},{"name":"initialoutlay","type":"\"integer\"","metadata":"{}"},{"name":"monthlymaintenance","type":"\"integer\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1600953045661,"submitTime":1600953045652,"finishTime":1600953046280,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"756.57177734375","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2b6f16e5-d8a3-4edb-8733-2fa0dba0c5a1"},{"version":"CommandV1","origId":4364181566351994,"guid":"75df2f69-e65b-4320-871e-51527b0991a4","subtype":"command","commandType":"auto","position":18.0,"command":"%md #### Q3: How can you produce a list of facilities that charge a fee to members, where the fee is less than 20% of the facility's monthly maintenance cost? \n#### Return the facid, facility name, member cost, and monthly maintenance of the facilities in question.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6c54beab-09aa-4367-8b69-59fe00b11554"},{"version":"CommandV1","origId":4364181566351995,"guid":"71ee00c2-1e71-4f7f-8020-b82d648a86de","subtype":"command","commandType":"auto","position":19.0,"command":"%sql\nSELECT facid, name, membercost, monthlymaintenance FROM facilities WHERE membercost > 0 AND membercost < (monthlymaintenance * 20 / 100)","commandVersion":49,"state":"finished","results":{"type":"table","data":[[0,"Tennis Court 1",5.0,200],[1,"Tennis Court 2",5.0,200],[4,"Massage Room 1",9.9,3000],[5,"Massage Room 2",9.9,3000],[6,"Squash Court",3.5,80]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"facid","type":"\"integer\"","metadata":"{}"},{"name":"name","type":"\"string\"","metadata":"{}"},{"name":"membercost","type":"\"double\"","metadata":"{}"},{"name":"monthlymaintenance","type":"\"integer\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1600953317975,"submitTime":1600953317962,"finishTime":1600953318765,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"745.90087890625","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"32e92cf4-a84e-4a13-b62a-f43d30d8d116"},{"version":"CommandV1","origId":4364181566351996,"guid":"2f87bb40-05d4-43dc-aca2-ba1864136ea1","subtype":"command","commandType":"auto","position":20.0,"command":"%md #### Q4: How can you retrieve the details of facilities with ID 1 and 5? Write the query without using the OR operator.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"b846ef86-bfa7-4ec5-928b-c551e541563d"},{"version":"CommandV1","origId":4364181566351997,"guid":"4268127c-4ac3-4a68-afde-ffa7e39f23c2","subtype":"command","commandType":"auto","position":21.0,"command":"%sql\nSELECT * FROM facilities WHERE facid between 1 and 5","commandVersion":21,"state":"finished","results":{"type":"table","data":[[1,"Tennis Court 2",5.0,25.0,8000,200],[2,"Badminton Court",0.0,15.5,4000,50],[3,"Table Tennis",0.0,5.0,320,10],[4,"Massage Room 1",9.9,80.0,4000,3000],[5,"Massage Room 2",9.9,80.0,4000,3000]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"facid","type":"\"integer\"","metadata":"{}"},{"name":"name","type":"\"string\"","metadata":"{}"},{"name":"membercost","type":"\"double\"","metadata":"{}"},{"name":"guestcost","type":"\"double\"","metadata":"{}"},{"name":"initialoutlay","type":"\"integer\"","metadata":"{}"},{"name":"monthlymaintenance","type":"\"integer\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1600953421434,"submitTime":1600953421425,"finishTime":1600953422162,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"760.90087890625","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"df7ef80e-e103-4884-82bc-d06bf61f7d8c"},{"version":"CommandV1","origId":4364181566351998,"guid":"fb9130e8-65c1-4324-a81c-b5b456229f15","subtype":"command","commandType":"auto","position":22.0,"command":"%md #### Q5: How can you produce a list of facilities, with each labelled as 'cheap' or 'expensive', depending on if their monthly maintenance cost is more than $100? \n#### Return the name and monthly maintenance of the facilities in question.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"6f259ca5-1e4d-4946-972b-a919e0258f01"},{"version":"CommandV1","origId":4364181566351999,"guid":"e4711794-1e0c-4ead-a34c-b40da1107d79","subtype":"command","commandType":"auto","position":23.0,"command":"%sql\nSELECT name, monthlymaintenance, CASE WHEN monthlymaintenance > 100 THEN \"Expensive\" ELSE \"Cheap\" END AS type FROM facilities","commandVersion":44,"state":"finished","results":{"type":"table","data":[["Tennis Court 1",200,"Expensive"],["Tennis Court 2",200,"Expensive"],["Badminton Court",50,"Cheap"],["Table Tennis",10,"Cheap"],["Massage Room 1",3000,"Expensive"],["Massage Room 2",3000,"Expensive"],["Squash Court",80,"Cheap"],["Snooker Table",15,"Cheap"],["Pool Table",15,"Cheap"]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"name","type":"\"string\"","metadata":"{}"},{"name":"monthlymaintenance","type":"\"integer\"","metadata":"{}"},{"name":"type","type":"\"string\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1600953716218,"submitTime":1600953716211,"finishTime":1600953716860,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"449.0673828125","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"32886514-c686-4e34-8b43-b1cc6a00b0cb"},{"version":"CommandV1","origId":4364181566352000,"guid":"96ec1ff9-5bed-4f70-9ca9-f69ea412053d","subtype":"command","commandType":"auto","position":24.0,"command":"%md #### Q6: You'd like to get the first and last name of the last member(s) who signed up. Do not use the LIMIT clause for your solution.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"fb14bc03-139b-4983-92f9-28702a885307"},{"version":"CommandV1","origId":4364181566352001,"guid":"cab75c27-9c35-44de-86b1-cf651d08a4e4","subtype":"command","commandType":"auto","position":25.0,"command":"%sql\nSELECT firstname, surname FROM members WHERE joindate = (SELECT MAX(joindate) FROM members)","commandVersion":40,"state":"finished","results":{"type":"table","data":[["Darren","Smith"]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"firstname","type":"\"string\"","metadata":"{}"},{"name":"surname","type":"\"string\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1600953950854,"submitTime":1600953950848,"finishTime":1600953952225,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"1129.7861328125","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"dd57dc96-d998-4339-99ef-3eebb2dbb82a"},{"version":"CommandV1","origId":4364181566352002,"guid":"2bc5ce62-80fb-4b61-97c3-c3939d2876b4","subtype":"command","commandType":"auto","position":26.0,"command":"%md ####  Q7: How can you produce a list of all members who have used a tennis court?\n- Include in your output the name of the court, and the name of the member formatted as a single column. \n- Ensure no duplicate data\n- Also order by the member name.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"63e2521f-4003-42f3-be34-39a90d19e0ec"},{"version":"CommandV1","origId":4364181566352003,"guid":"ed04d589-a72f-41b0-8362-72bb691ed5be","subtype":"command","commandType":"auto","position":27.0,"command":"%sql\n\nSELECT CONCAT(F.name, \" \", A.fullname) as member_list FROM (\n  SELECT B.facid, B.memid, CONCAT_WS(\" \", M.surname, M.firstname) as fullname FROM bookings AS B \n  INNER JOIN members AS M ON B.memid = M.memid AND B.memid != 0\n  GROUP BY B.facid, B.memid, M.surname, M.firstname\n) AS A INNER JOIN facilities AS F\nON A.facid = f.facid\nWHERE F.name like \"Tennis Court%\"\nGROUP BY F.name, A.fullname\nORDER BY A.fullname\n\n","commandVersion":286,"state":"finished","results":{"type":"table","data":[["Tennis Court 2 Bader Florence"],["Tennis Court 1 Bader Florence"],["Tennis Court 1 Baker Anne"],["Tennis Court 2 Baker Anne"],["Tennis Court 1 Baker Timothy"],["Tennis Court 2 Baker Timothy"],["Tennis Court 1 Boothe Tim"],["Tennis Court 2 Boothe Tim"],["Tennis Court 1 Butters Gerald"],["Tennis Court 2 Butters Gerald"],["Tennis Court 1 Coplin Joan"],["Tennis Court 1 Crumpet Erica"],["Tennis Court 1 Dare Nancy"],["Tennis Court 2 Dare Nancy"],["Tennis Court 1 Farrell David"],["Tennis Court 2 Farrell David"],["Tennis Court 2 Farrell Jemima"],["Tennis Court 1 Farrell Jemima"],["Tennis Court 1 Genting Matthew"],["Tennis Court 1 Hunt John"],["Tennis Court 2 Hunt John"],["Tennis Court 2 Jones David"],["Tennis Court 1 Jones David"],["Tennis Court 1 Jones Douglas"],["Tennis Court 2 Joplette Janice"],["Tennis Court 1 Joplette Janice"],["Tennis Court 2 Owen Charles"],["Tennis Court 1 Owen Charles"],["Tennis Court 1 Pinker David"],["Tennis Court 2 Purview Millicent"],["Tennis Court 1 Rownam Tim"],["Tennis Court 2 Rownam Tim"],["Tennis Court 2 Rumney Henrietta"],["Tennis Court 1 Sarwin Ramnaresh"],["Tennis Court 2 Sarwin Ramnaresh"],["Tennis Court 2 Smith Darren"],["Tennis Court 2 Smith Jack"],["Tennis Court 1 Smith Jack"],["Tennis Court 2 Smith Tracy"],["Tennis Court 1 Smith Tracy"],["Tennis Court 2 Stibbons Ponder"],["Tennis Court 1 Stibbons Ponder"],["Tennis Court 2 Tracy Burton"],["Tennis Court 1 Tracy Burton"]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"member_list","type":"\"string\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1601660505580,"submitTime":1601660505574,"finishTime":1601660513206,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"1624.796875","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"98db20ff-c8f1-4465-841a-9d8e37a6c68d"},{"version":"CommandV1","origId":4364181566352004,"guid":"d9120eb1-f882-41f0-8ac5-0f20ab2435c5","subtype":"command","commandType":"auto","position":28.0,"command":"%md #### Q8: How can you produce a list of bookings on the day of 2012-09-14 which will cost the member (or guest) more than $30? \n\n- Remember that guests have different costs to members (the listed costs are per half-hour 'slot')\n- The guest user's ID is always 0. \n\n#### Include in your output the name of the facility, the name of the member formatted as a single column, and the cost.\n\n- Order by descending cost, and do not use any subqueries.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1499323a-104c-43d7-99cd-174a9a508dfe"},{"version":"CommandV1","origId":4364181566352005,"guid":"30bb5da6-b1fd-4135-aec2-26c0ece97010","subtype":"command","commandType":"auto","position":29.0,"command":"%sql\n\nSELECT F.name, B.bookid, CONCAT(M.surname,\" \", M.firstname) AS mname, F.guestcost, F.membercost \nFROM bookings B \nINNER JOIN facilities F\nON B.facid = F.facid\nINNER JOIN members M\nON B.memid = M.memid\nWHERE starttime >= '2012-09-04 00:00:00' AND starttime <= '2012-09-04 23:59:59'\nAND (F.membercost > 30 OR F.guestcost > 30)","commandVersion":288,"state":"finished","results":{"type":"table","data":[["Massage Room 1",2316,"GUEST GUEST",80.0,9.9],["Massage Room 1",2317,"Rownam Tim",80.0,9.9],["Massage Room 1",2318,"GUEST GUEST",80.0,9.9],["Massage Room 1",2319,"Dare Nancy",80.0,9.9],["Massage Room 1",2320,"GUEST GUEST",80.0,9.9],["Massage Room 1",2321,"Rownam Tim",80.0,9.9],["Massage Room 1",2322,"GUEST GUEST",80.0,9.9],["Massage Room 1",2323,"GUEST GUEST",80.0,9.9],["Massage Room 1",2324,"Jones David",80.0,9.9],["Massage Room 1",2325,"Boothe Tim",80.0,9.9],["Massage Room 2",2326,"GUEST GUEST",80.0,9.9],["Massage Room 2",2327,"GUEST GUEST",80.0,9.9]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"name","type":"\"string\"","metadata":"{}"},{"name":"bookid","type":"\"integer\"","metadata":"{}"},{"name":"mname","type":"\"string\"","metadata":"{}"},{"name":"guestcost","type":"\"double\"","metadata":"{}"},{"name":"membercost","type":"\"double\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1601659649076,"submitTime":1601659649069,"finishTime":1601659650816,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"1286.84375","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"d33880b7-e8d9-42c1-8f19-06282b7b2f24"},{"version":"CommandV1","origId":4364181566352006,"guid":"82f50c6c-32ca-44f5-9623-e3003d7c29d2","subtype":"command","commandType":"auto","position":30.0,"command":"%md #### Q9: This time, produce the same result as in Q8, but using a subquery.","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"31187def-a48b-4b0a-9dc2-37e7e4e8ab6a"},{"version":"CommandV1","origId":4364181566352007,"guid":"92273a03-08fc-4bd6-9cd1-653bc942b63e","subtype":"command","commandType":"auto","position":31.0,"command":"%sql\n\nSELECT A.name, A.bookid, A.memid, CONCAT(M.surname,\" \", M.firstname) AS mname, A.guestcost, A.membercost  FROM (\n  SELECT F.name, B.bookid, B.memid, F.guestcost, F.membercost \n  FROM bookings B \n  INNER JOIN facilities F\n  ON B.facid = F.facid\n  WHERE starttime >= '2012-09-04 00:00:00' AND starttime <= '2012-09-04 23:59:59'\n  AND (F.membercost > 30 OR F.guestcost > 30)\n) AS A INNER JOIN members AS M\nON M.memid = A.memid\n\n","commandVersion":42,"state":"finished","results":{"type":"table","data":[["Massage Room 1",2316,0,"GUEST GUEST",80.0,9.9],["Massage Room 1",2317,3,"Rownam Tim",80.0,9.9],["Massage Room 1",2318,0,"GUEST GUEST",80.0,9.9],["Massage Room 1",2319,7,"Dare Nancy",80.0,9.9],["Massage Room 1",2320,0,"GUEST GUEST",80.0,9.9],["Massage Room 1",2321,3,"Rownam Tim",80.0,9.9],["Massage Room 1",2322,0,"GUEST GUEST",80.0,9.9],["Massage Room 1",2323,0,"GUEST GUEST",80.0,9.9],["Massage Room 1",2324,11,"Jones David",80.0,9.9],["Massage Room 1",2325,8,"Boothe Tim",80.0,9.9],["Massage Room 2",2326,0,"GUEST GUEST",80.0,9.9],["Massage Room 2",2327,0,"GUEST GUEST",80.0,9.9]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"name","type":"\"string\"","metadata":"{}"},{"name":"bookid","type":"\"integer\"","metadata":"{}"},{"name":"memid","type":"\"integer\"","metadata":"{}"},{"name":"mname","type":"\"string\"","metadata":"{}"},{"name":"guestcost","type":"\"double\"","metadata":"{}"},{"name":"membercost","type":"\"double\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1601659827939,"submitTime":1601659827932,"finishTime":1601659829322,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"714.03515625","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"cd83f3de-b515-4d20-9cc2-67d2c42e3c0d"},{"version":"CommandV1","origId":4364181566352008,"guid":"3f0857c9-4f7a-4bbc-a0ec-e202ccf324c3","subtype":"command","commandType":"auto","position":32.0,"command":"%md #### Q10: Produce a list of facilities with a total revenue less than 1000.\n- The output should have facility name and total revenue, sorted by revenue. \n- Remember that there's a different cost for guests and members!","commandVersion":1,"state":"finished","results":{"type":"raw","data":"","arguments":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"dc036707-2aa6-4577-9037-23ac4fc3595c"},{"version":"CommandV1","origId":4364181566352009,"guid":"0a449cfd-c601-4c8e-8732-7e373f1d0911","subtype":"command","commandType":"auto","position":33.0,"command":"%sql\nSELECT name, mcost + gcost as totalcost FROM (\n  SELECT F.name, SUM(F.membercost) AS mcost, SUM(F.guestcost) as gcost \n  FROM facilities AS F \n  INNER JOIN bookings AS B\n  ON F.facid = B.facid\n  GROUP BY F.name\n) AS A \nwhere mcost + gcost > 1000","commandVersion":135,"state":"finished","results":{"type":"table","data":[["Pool Table",4180.0],["Tennis Court 2",11670.0],["Squash Court",9240.0],["Tennis Court 1",12240.0],["Badminton Court",5936.5],["Massage Room 1",56547.09999999995],["Massage Room 2",9978.9],["Table Tennis",2015.0],["Snooker Table",2220.0]],"arguments":{},"addedWidgets":{},"removedWidgets":[],"schema":[{"name":"name","type":"\"string\"","metadata":"{}"},{"name":"totalcost","type":"\"double\"","metadata":"{}"}],"overflow":false,"aggData":[],"aggSchema":[],"aggOverflow":false,"aggSeriesLimitReached":false,"aggError":"","aggType":"","plotOptions":null,"isJsonSchema":true,"dbfsResultPath":null,"datasetInfos":[],"columnCustomDisplayInfos":{}},"errorSummary":null,"error":null,"workflows":[],"startTime":1601660444299,"submitTime":1601660444293,"finishTime":1601660447800,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"1286.84375","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"37d21483-8234-44b5-a59f-ef8259642b25"},{"version":"CommandV1","origId":4364181566352016,"guid":"445a1b0e-f65c-4821-93af-1dfbe485ce00","subtype":"command","commandType":"auto","position":13.5,"command":"%sql\nselect * from facilities;","commandVersion":17,"state":"error","results":null,"errorSummary":"Error in SQL statement: AnalysisException: Table or view not found: facilities; line 1 pos 14;\n'Project [*]\n+- 'UnresolvedRelation [facilities]\n","error":"com.databricks.backend.common.rpc.DatabricksExceptions$SQLExecutionException: org.apache.spark.sql.AnalysisException: Table or view not found: facilities; line 1 pos 14;\n'Project [*]\n+- 'UnresolvedRelation [facilities]\n\n\tat org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)\n\tat org.apache.spark.sql.catalyst.analysis.CheckAnalysis.$anonfun$checkAnalysis$1(CheckAnalysis.scala:109)\n\tat org.apache.spark.sql.catalyst.analysis.CheckAnalysis.$anonfun$checkAnalysis$1$adapted(CheckAnalysis.scala:95)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:189)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.$anonfun$foreachUp$1(TreeNode.scala:188)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.$anonfun$foreachUp$1$adapted(TreeNode.scala:188)\n\tat scala.collection.immutable.List.foreach(List.scala:392)\n\tat org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:188)\n\tat org.apache.spark.sql.catalyst.analysis.CheckAnalysis.checkAnalysis(CheckAnalysis.scala:95)\n\tat org.apache.spark.sql.catalyst.analysis.CheckAnalysis.checkAnalysis$(CheckAnalysis.scala:92)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:159)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.$anonfun$executeAndCheck$1(Analyzer.scala:187)\n\tat org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper$.markInAnalyzer(AnalysisHelper.scala:205)\n\tat org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:184)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$analyzed$1(QueryExecution.scala:90)\n\tat org.apache.spark.sql.catalyst.QueryPlanningTracker.measurePhase(QueryPlanningTracker.scala:111)\n\tat org.apache.spark.sql.execution.QueryExecution.$anonfun$executePhase$1(QueryExecution.scala:165)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:835)\n\tat org.apache.spark.sql.execution.QueryExecution.executePhase(QueryExecution.scala:165)\n\tat org.apache.spark.sql.execution.QueryExecution.analyzed$lzycompute(QueryExecution.scala:91)\n\tat org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:88)\n\tat org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:80)\n\tat org.apache.spark.sql.Dataset$.$anonfun$ofRows$2(Dataset.scala:102)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:835)\n\tat org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:100)\n\tat org.apache.spark.sql.SparkSession.$anonfun$sql$1(SparkSession.scala:670)\n\tat org.apache.spark.sql.SparkSession.withActive(SparkSession.scala:835)\n\tat org.apache.spark.sql.SparkSession.sql(SparkSession.scala:665)\n\tat org.apache.spark.sql.SQLContext.sql(SQLContext.scala:672)\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal.$anonfun$executeSql$1(SQLDriverLocal.scala:90)\n\tat scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:238)\n\tat scala.collection.immutable.List.foreach(List.scala:392)\n\tat scala.collection.TraversableLike.map(TraversableLike.scala:238)\n\tat scala.collection.TraversableLike.map$(TraversableLike.scala:231)\n\tat scala.collection.immutable.List.map(List.scala:298)\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal.executeSql(SQLDriverLocal.scala:36)\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal.repl(SQLDriverLocal.scala:143)\n\tat com.databricks.backend.daemon.driver.DriverLocal.$anonfun$execute$10(DriverLocal.scala:431)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:237)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:232)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:229)\n\tat com.databricks.backend.daemon.driver.DriverLocal.withAttributionContext(DriverLocal.scala:48)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:274)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:267)\n\tat com.databricks.backend.daemon.driver.DriverLocal.withAttributionTags(DriverLocal.scala:48)\n\tat com.databricks.backend.daemon.driver.DriverLocal.execute(DriverLocal.scala:408)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.$anonfun$tryExecutingCommand$1(DriverWrapper.scala:653)\n\tat scala.util.Try$.apply(Try.scala:213)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.tryExecutingCommand(DriverWrapper.scala:645)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.getCommandOutputAndError(DriverWrapper.scala:486)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.executeCommand(DriverWrapper.scala:598)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.runInnerLoop(DriverWrapper.scala:391)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.runInner(DriverWrapper.scala:337)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.run(DriverWrapper.scala:219)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal.executeSql(SQLDriverLocal.scala:128)\n\tat com.databricks.backend.daemon.driver.SQLDriverLocal.repl(SQLDriverLocal.scala:143)\n\tat com.databricks.backend.daemon.driver.DriverLocal.$anonfun$execute$10(DriverLocal.scala:431)\n\tat com.databricks.logging.UsageLogging.$anonfun$withAttributionContext$1(UsageLogging.scala:237)\n\tat scala.util.DynamicVariable.withValue(DynamicVariable.scala:62)\n\tat com.databricks.logging.UsageLogging.withAttributionContext(UsageLogging.scala:232)\n\tat com.databricks.logging.UsageLogging.withAttributionContext$(UsageLogging.scala:229)\n\tat com.databricks.backend.daemon.driver.DriverLocal.withAttributionContext(DriverLocal.scala:48)\n\tat com.databricks.logging.UsageLogging.withAttributionTags(UsageLogging.scala:274)\n\tat com.databricks.logging.UsageLogging.withAttributionTags$(UsageLogging.scala:267)\n\tat com.databricks.backend.daemon.driver.DriverLocal.withAttributionTags(DriverLocal.scala:48)\n\tat com.databricks.backend.daemon.driver.DriverLocal.execute(DriverLocal.scala:408)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.$anonfun$tryExecutingCommand$1(DriverWrapper.scala:653)\n\tat scala.util.Try$.apply(Try.scala:213)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.tryExecutingCommand(DriverWrapper.scala:645)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.getCommandOutputAndError(DriverWrapper.scala:486)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.executeCommand(DriverWrapper.scala:598)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.runInnerLoop(DriverWrapper.scala:391)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.runInner(DriverWrapper.scala:337)\n\tat com.databricks.backend.daemon.driver.DriverWrapper.run(DriverWrapper.scala:219)\n\tat java.lang.Thread.run(Thread.java:748)\n","workflows":[],"startTime":1601185940013,"submitTime":1601185940013,"finishTime":1601185940183,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"1129.7861328125","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"cb179117-7eb1-45ed-a40d-f60fe27c76af"}],"dashboards":[],"guid":"ad03dd33-99ec-42d2-83ca-4676e314c0f6","globalVars":{},"iPythonMetadata":{"nbformat":4,"IPythonMetadata":{"name":"Mini_Project_SQL_with_Spark","notebookId":1931807081501742}},"inputWidgets":{}}